openapi: 3.0.3
info:
  title: Product And Location - OpenAPI 3.0
  description: |-
    정책 : 
    
         1) 창고는 하나로 설정 
         2) 한가지 상품이라도 여러 랙에 지정 가능, 같은 상품 여러 위치에 배치 가능.
         3) 배포 우선으로 진행, 세부적인 부분들은 차후에 추가하여 진행하도록 하고,
            고객(또는 실무자)들이 바로 사용할 수 있는 단계까지 세팅 진행.
    
         4번은 보류 -> 랙을 User가 원하는 대로 정할 수 있게 설정 필요.     
         4) 랙의 수량은 필요할 때, “4.위치 관리" 페이지에서 추가하여 진행하고,
            “2.2 상품 관리 - 상품 조회/수정”에서 상품 등록 시, 옵션에서 선택하여 위치 지정.
            (사용자가 위치를 수기로 작성하는 일은 없도록 설정)
         # 프로젝트 마감 기간 : 4/20일(토요일)까지 배포까지 완료하기.
  termsOfService: http://swagger.io/terms/
  contact:
    email: santinomin0381@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://localhost:8080
tags:
  - name: product
    description: Product management
    externalDocs:
      description: Find out more about our api (visit Tistory)
      url: https://santino.tistory.com/

  - name: location
    description: Location management
    externalDocs:
      description: Find out more about our api (visit Tistory)
      url: https://santino.tistory.com/

  # 2.1(Get) /product/manage/search : 상품 검색
paths:
  /product/manage/search:
    get:
      tags:
        - product
      summary: 상품 검색
      description: 상품 검색 시, 상품 리스트를 보여줍니다.
      parameters:
        - name: productName
          in: query
          description: 상품명
          required: true
          explode: true
          schema:
            type: string

      responses:
        '200':
          description: 정상적인 접근입니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/searchProduct'
            application/xml:
              schema:
                $ref: '#/components/schemas/searchProduct'
        '400':
          description: Invalid input
        '404':
          description: Product not found
        '422':
          description: Validation exception

  #  2.2 (GET) product/manage/search/{productId} 상품 정보 보여주기
  /product/manage/search/{productId}:
    get:
      tags:
        - product
      summary: 상품 정보
      description: 상품의 정보를 보여줍니다.(이미지,상품명,위치)
      parameters:
        - name: productId
          in: path
          description: 상품id
          required: true
          explode: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 성공적인 접근입니다.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/productId'
                  - type: object
                    properties:
                      additionalProperty:
                        type: string
            application/xml:
              schema:
                allOf:
                  - $ref: '#/components/schemas/productId'
                  - type: object
                    properties:
                      additionalProperty:
                        type: string
        '400':
          description: Invalid status value
        '404':
          description: Product not found
        '422':
          description: Validation exception

  /product/manage/register:
    post:
      tags:
        - product
      summary: 상품 등록
      description: 상품을 등록합니다. 기입 사항을 확인 해주세요.
      requestBody:
        description: 해당 상품을 등록합니다.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/beforePost'
          application/xml:
            schema:
              $ref: '#/components/schemas/beforePost'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/beforePost'
        required: true
      #      parameters:
      #        - name: productName
      #          in: query
      #          description: 등록하실 상품명을 입력 해주세요.
      #          #          example: 예시) 오이 비누
      #          required: true
      #          schema:
      #            type: string

      responses:
        '200':
          description: 등록 완료 되었습니다.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/post'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/post'
        '400':
          description: Invalid tag value
        '404':
          description: Product not found
        '422':
          description: Validation exception

  #2.2(PUT) /product/manage/search/{productId}/edit : 상품 정보 변경
  /product/manage/search/{productId}/edit:
    put:
      tags:
        - product
      summary: 상품 정보 변경
      description: 해당 상품의 정보를 변경 합니다.
      requestBody:
        description: 세부 내용을 변경합니다.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/productInfo'
          application/xml:
            schema:
              $ref: '#/components/schemas/productInfo'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/productInfo'
        required: true
      operationId: edit

      parameters:
        - name: productId
          in: path
          description: productId (path에서 가져온 값)
          required: true
          schema:
            type: integer

      responses:
        '200':
          description: 수정 완료 되었습니다.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/edited'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/edited'
        '400':
          description: Invalid tag value
        '404':
          description: Product not found
        '422':
          description: Validation exception
      # security:
      #   - product_auth:
      #       - write:pets
      #       - read:pets

  /product/manage/search/{productId}/delete:
    put:
      tags:
        - product
      summary: 해당 상품 삭제(update로 진행)
      description: 해당 상품 삭제 -> 완전 삭제 보다는, update로 진행해서 valid=false로 설정.
      operationId: delete
      parameters:
        - name: productId
          in: path
          description: 해당 상품을 삭제합니다.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 삭제 완료 되었습니다.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/delete'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/delete'
        '400':
          description: Invalid tag value
        '404':
          description: Product not found
        '422':
          description: Validation exception

  /product/locationManagement/locationList:
    get:
      tags:
        - location
      summary: 위치 리스트
      description: 상품의 위치 리스트를 가져옵니다.
      parameters:
        - name: areaList
          in: query
          description: 전체 구역을 보여줍니다.
          required: true
          schema:
            type: string
        - name: rackList
          in: query
          description: 전체 랙 위치를 보여줍니다.
          required: true
          schema:
            type: string
        - name: floorList
          in: query
          description: 전체 층 높이를 보여줍니다.
          required: true
          schema:
            type: string


      responses:
        '200':
          description: 정상적인 접근입니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/location'
            application/xml:
              schema:
                $ref: '#/components/schemas/location'
        '400':
          description: Invalid ID supplied
        '404':
          description: Location not found




  /product/location/addArea:
    post:
      tags:
        - location
      summary: 구역 등록
      description: 구역을 등록합니다.
      parameters:
        - name: area
          in: query
          description: 구역을 추가합니다.
          example: 예시) B
          required: true
          schema:
            type: string

      responses:
        '200':
          description: 정상적인 접근입니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/addArea'
            application/xml:
              schema:
                $ref: '#/components/schemas/addArea'
        '400':
          description: Invalid ID supplied
        '404':
          description: location not found

  /product/location/addRack:
    post:
      tags:
        - location
      summary: 랙 추가
      description: 랙을 추가합니다.
      parameters:
        - name: rack
          in: query
          description: 랙 위치를 추가합니다.
          example: 예시) 8
          required: true
          schema:
            type: integer
            format: int64

      responses:
        '200':
          description: 정상적인 접근입니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/addRack'
            application/xml:
              schema:
                $ref: '#/components/schemas/addRack'
        '400':
          description: Invalid ID supplied
        '404':
          description: location not found

  /product/location/addFloor:
    post:
      tags:
        - location
      summary: 층 추가
      description: 층을 추가합니다.
      parameters:
        - name: floor
          in: query
          description: 층을 추가합니다.
          example: 예시) 2
          required: true
          schema:
            type: integer
            format: int64

      responses:
        '200':
          description: 정상적인 접근입니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/addFloor'
            application/xml:
              schema:
                $ref: '#/components/schemas/addFloor'
        '400':
          description: Invalid ID supplied
        '404':
          description: location not found



components:
  schemas:
    edited:
      type: object
      properties:
        productId:
          type: integer
          example: 6
        productName:
          type: string
          example: 압타밀
        #        expired_date:
        #          type: string
        #          format: date-time
        imageUrl:
          type: array
          items:
            type: string
          example:
            - "https://www.google.com/babyProducts/image3.jpg"
        price:
          type: string
          example: 18,000원
          xml:
            name: imageUrl
        #        created_at:
        #          type: string
        #          format: date-time
        #          example: "2024-04-31T00:00:00Z"
        #        updated_at:
        #          type: string
        #          format: date-time
        #          example: "2024-04-31T00:00:00Z"
        #        deleted_at:
        #          type: string
        #          format: date-time
        #          example: "2024-04-31T00:00:00Z"
        category:
          $ref: '#/components/schemas/CategoryKindermilch'
        status:
          type: string
          description: 주문 상황
          example: 판매 중지
    #          enum:
    #            - 판매 중지
    #            - 승인 완료
    #            - 배송 중
    #        complete:
    #          type: boolean
    #      xml:
    #        name: order

    delete:
      type: object
      properties:
        productId:
          type: integer
          example: 8
        productName:
          type: string
          example: 힙 분유

        #        expired_date:
        #          type: string
        #          format: date-time
        #        imageUrl:
        #          type: array
        #          items:
        #            type: string
        #          example:
        #            - "https://www.google.com/babyProducts/image3.jpg"
        #            - "https://www.google.com/babyProducts/image4.jpg"
        #        price:
        #          type: string
        #          example: 18,000원
        #          xml:
        #            name: imageUrl
        #        created_at:
        #          type: string
        #          format: date-time
        #          example: "2024-04-31T00:00:00Z"
        #        updated_at:
        #          type: string
        #          format: date-time
        #          example: "2024-04-31T00:00:00Z"
        #        deleted_at:
        #          type: string
        #          format: date-time
        #          example: "2024-04-31T00:00:00Z"
        #        category:
        #          $ref: '#/components/schemas/CategoryKindermilch'
        status:
          type: string
          description: 해당 상품 비활성화로 전환
          example: 상품 삭제(=상품 비활성화로 전환)


    location:
      # items:
      type: object
      items:
        type: array
      properties:
        area:
          type: string
            # items:
          #   type: string
          # example: C
        rack:
          type: array
          items:
            type: integer
            # example: 4
        floor:
          type: array
          items:
            type: integer
            # example: 2
        status:
          type: string
          description: 주문 상황
          example: 등록 가능
          enum:
            - 등록 가능
            - 해당 위치에 등록이 불가합니다.

      example:
        area:
          - A, B, C, D, E
        rack:
          - 1,2,3,4,5
        floor:
          - 1,2,3,4,5
        status: 등록 가능

    addArea:
      type: object
      # items:
      # type: object
      properties:
        area:
          type: string
          # items:
          #   type: string

        status:
          type: string
          description: 구역 등록 상태
          example: 등록 가능
          enum:
            - 등록 가능
            - 해당 위치에 등록이 불가합니다.

      example:
        area: "E"
        status: 등록 완료


    addRack:
      type: object
      # items:
      # type: object
      properties:
        rack:
          type: string
        status:
          type: string
          description: 주문 상황
          example: 등록 가능
          enum:
            - 등록 가능
            - 해당 위치에 등록이 불가합니다.
      example:
        rack: "6"
        status: 등록 완료

    addFloor:
      type: string
      # items:
      # type: object
      properties:
        floor:
          type: integer
        status:
          type: string
          description: 주문 상황
          example: 등록 가능
          enum:
            - 등록 가능
            - 해당 위치에 등록이 불가합니다.
      example:
        floor: "2"
        status: 등록 완료

    searchProduct:
      type: array
      items:
        type: object
        properties:
          productName:
            type: string
          imageUrl:
            type: array
            items:
              type: string
          price:
            type: string
          category:
            type: string
          status:
            type: string

      example:
        - productName: 유아 분유
          imageUrl:
            -  "https://m.media-amazon.com/images/I/71EOeu0iuGL._AC_SX679_.jpg"
          price: 40,000원
          category: 유아 식품
          status: available
        - productName: 유아 젤리
          imageUrl:
            - "https://m.media-amazon.com/images/I/416vlt3Mo5L.__AC_SX300_SY300_QL70_FMwebp_.jpg"
          price: 15,000원
          category: 유아 식품
          status: available
        - productName: 유아 신발
          imageUrl:
            - "https://m.media-amazon.com/images/I/61WYjGhP5CL._AC_SX695_.jpg"
          price: 25,000원
          category: 유아 용품
          status: available

    productInfo:
      type: object
      properties:
        productId:
          type: integer
          example: 6
        productName:
          type: string
          #          format: int64
          example: 힙 분유
        #        expired_date:
        #          type: string
        #          format: date-time
        imageUrl:
          type: array
          items:
            type: string
          example:
            - "https://www.google.com/babyProducts/image1.jpg"
        price:
          type: string
          example: 15,000원
          xml:
            name: imageUrl
        #        created_at:
        #          type: string
        #          format: date-time
        #          example: "2024-04-30T00:00:00Z"
        #        updated_at:
        #          type: string
        #          format: date-time
        #          example: "2024-04-30T00:00:00Z"
        #        deleted_at:
        #          type: string
        #          format: date-time
        #          example: "2024-04-30T00:00:00Z"
        category:
          $ref: '#/components/schemas/CategoryKindermilch'
        status:
          type: string
          description: 주문 상황
          example: 판매 중
    #          enum:
    #            - 판매 중
    #            - 승인 완료
    #            - 배송 중
    #        complete:
    #          type: boolean
    #      xml:
    #        name: order

    CategoryKindermilch:
      type: object
      properties:
        category_id:
          type: integer
          format: int64
          example: 35
        category_name:
          type: string
          example: 출산/유아동
        sort:
          type: string
          example: 분유/어린이 식품
      xml:
        name: category

    CategoryList:
      type: object
      properties:
        categoryId:
          type: integer
          format: int64
        #          example: 35
        categoryName:
          type: string
        #          example: 출산/유아동
        sort:
          type: string
          #          example: 분유/어린이 식품
          example:
            - categoryId: 1,2,3,4,5,6
            - categoryName: 출산/유아동 용품, 주류, 의류, 일반 식품, 건강 식품
            - sort: 분유/어린이 용품, 와인, 보드카, 신발, 상의, 하의, 비타민


    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    #    Tag:
    #      type: object
    #      properties:
    #        id:
    #          type: integer
    #          format: int64
    #        name:
    #          type: string
    #      xml:
    #        name: tag

    productId:
      type: object
      items:
        type: array
        properties:
          productId:
            type: integer
            # format: int64
          productName:
            type: string
          imageUrl:
            type: string
            items:
              type: string
          price:
            type: string
          category:
            type: string
          status:
            type: string
          location:
            type: string

      example:
        productId: 3
        productName: 분유
        imageUrl:
          - "https://m.media-amazon.com/images/I/71EOeu0iuGL._AC_SX679_.jpg"
        price: 40,000원
        category: 유아 식품
        status: available
        location:
          area: "구역을 지정 해주세요."
          rackNumber: "랙 번호를 지정 해주세요."
          floorHeight: "층 높이를 지정 해주세요."


    #        - productName: 젤리
    #          imageUrl:
    #            - "https://m.media-amazon.com/images/I/416vlt3Mo5L.__AC_SX300_SY300_QL70_FMwebp_.jpg"
    #          price: 15,000원
    #          category: 유아 식품
    #          status: available
    #        - productName: 신발
    #          imageUrl:
    #            - "https://m.media-amazon.com/images/I/61WYjGhP5CL._AC_SX695_.jpg"
    #          price: 25,000원
    #          category: 유아 용품
    #          status: available

    #    ApiResponse:
    #      type: object
    #      properties:
    #        code:
    #          type: integer
    #          format: int32
    #        type:
    #          type: string
    #        message:
    #          type: string
    #      xml:
    #        name: '##default'

    post:
      type: object
      properties:
        productName:
          type: string
          example: 오이 비누
        expiredDate:
          type: string
          format: date-time
        imageUrl:
          type: object
          items:
            type: string
          example:
            - "https://www.google.com/babyProducts/image5.jpg"
        price:
          type: string
          example: 18,000원
          xml:
            name: imageUrl
        #        created_at:
        #          type: string
        #          format: date-time
        #          example: "2024-04-31T00:00:00Z"
        #        updated_at:
        #          type: string
        #          format: date-time
        #          example: "2024-04-31T00:00:00Z"
        #        deleted_at:
        #          type: string
        #          format: date-time
        #          example: "2024-04-31T00:00:00Z"

    beforePost:
      type: object
      properties:
        productName:
          type: string
          example: 오이 비누
        expiredDate:
          type: string
          format: date-time
        imageUrl:
          type: string
          items:
            type: string
          example:
            - "https://www.google.com/babyProducts/image5.jpg"
        price:
          type: string
          example: 18,000원
          xml:
            name: imageUrl

  # requestBodies:
  #    edit:
  #      description: Pet object that needs to be added to the store
  #      content:
  #        application/json:
  #          schema:
  #            $ref: '#/components/schemas/edit'
  #        application/xml:
  #          schema:
  #            $ref: '#/components/schemas/edit'
  #    location:
  #      description: List of user object
  #      content:
  #        application/json:
  #          schema:
  #            type: array
  #            items:
  #              $ref: '#/components/schemas/User'
  # securitySchemes:
  #   petstore_auth:
  #     type: oauth2
  #     flows:
  #       implicit:
  #         authorizationUrl: https://petstore3.swagger.io/oauth/authorize
  #         scopes:
  #           write:pets: modify pets in your account
  #           read:pets: read your pets
  #   api_key:
  #     type: apiKey
  #     name: api_key
  #     in: header