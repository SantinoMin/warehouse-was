#openapi: 3.0.3
#info:
##  title: Product And Location - OpenAPI 3.0
##  description: |-
##    정책 :
##
##         1) 창고는 하나로 설정
##         2) 한가지 상품이라도 여러 랙에 지정 가능, 같은 상품 여러 위치에 배치 가능.
##         3) 배포 우선으로 진행, 세부적인 부분들은 차후에 추가하여 진행하도록 하고,
##            고객(또는 실무자)들이 바로 사용할 수 있는 단계까지 세팅 진행.
##         4) 랙의 수량은 필요할 때, “4.위치 관리" 페이지에서 추가하여 진행하고,
##            “2.2 상품 관리 - 상품 조회/수정”에서 상품 등록 시, 옵션에서 선택하여 위치 지정.
##            (사용자가 위치를 수기로 작성하는 일은 없도록 설정)
##         # 프로젝트 마감 기간 : 4/20일(토요일)까지 배포까지 완료하기.
##  termsOfService: http://swagger.io/terms/
##  contact:
##    email: santinomin0381@gmail.com
##  license:
##    name: Apache 2.0
##    url: http://www.apache.org/licenses/LICENSE-2.0.html
##  version: 1.0.11
##externalDocs:
##  description: Find out more about Swagger
##  url: http://swagger.io
#servers:
#  - $ref: 'servers.yml'
#    url: https://localhost:8080
##    servers:
##      $ref: 'servers.yml'
#tags:
#  - name: product
#    description: Product management
#    externalDocs:
#      description: Find out more about our api (visit to the tistory)
#      url: https://santino.tistory.com/
##
##  - name: location
##    description: Location management
##    externalDocs:
##      description: Find out more about our api (visit to the tistory)
##      url: https://santino.tistory.com/
#paths:
##  /product/manage/search:
##    get:
##      tags:
##        - product
##      summary: 상품 관리 페이지
##      description: 상품 관리 페이지를 보여줍니다.
##      operationId: search
##      responses:
##        '200':
##          description: 정상적인 접근입니다.
##          content:
##            application/json:
##              schema:
##                $ref: '#/components/schemas/Search'
##            application/xml:
##              schema:
##                $ref: '#/components/schemas/Search'
##        '400':
##          description: Invalid ID supplied
##        '404':
##          description: Pet not found
##        '422':
##          description: Validation exception
##      security:
##        - petstore_auth:
##            - write:pets
##            - read:pets
#  /product/manage/search/productsList:
#    get:
#      tags:
#        - product
#      summary: 상품 검색
#      description: 상품 검색 시, 상품 리스트를 보여줍니다.
#      operationId: productsList
#      responses:
#        '200':
#          description: 정상적인 상수입니다.(정상수))
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/ProductsList'
#            application/xml:
#              schema:
#                $ref: '#/components/schemas/ProductsList'
#        '400':
#          description: Invalid input
#        '422':
#          description: Validation exception
#      security:
#        - petstore_auth:
#            - write:pets
#            - read:pets
##  /product/manage/search/productsList/productInfo:
##    get:
##      tags:
##        - product
##      summary: 상품 정보
##      description: 상품의 세부 정보를 보여줍니다.(이미지,상품명,위치)
##      operationId: productInfo
##      parameters:
##        - name: status
##          in: query
##          description: Status values that need to be considered for filter
##          required: false
##          explode: true
##          schema:
##            type: string
##            default: available
##            enum:
##              - available
##              - pending
##              - sold
##      responses:
##        '200':
##          description: successful operation
##          content:
##            application/json:
##              schema:
##                type: array
##                items:
##                  $ref: '#/components/schemas/Pet'
##            application/xml:
##              schema:
##                type: array
##                items:
##                  $ref: '#/components/schemas/Pet'
##        '400':
##          description: Invalid status value
##      security:
##        - petstore_auth:
##            - write:pets
##            - read:pets
##  /product/manage/search/productsList/productInfo/edit:
##    put:
##      tags:
##        - product
##      summary: 상품 정보 변경
##      description: 해당 상품의 정보를 변경 합니다.
##      operationId: edit
##      parameters:
##        - name: tags
##          in: query
##          description: Tags to filter by
##          required: false
##          explode: true
##          schema:
##            type: array
##            items:
##              type: string
##      responses:
##        '200':
##          description: 정상적인 접근입니다.
##          content:
##            application/json:
##              schema:
##                type: array
##                items:
##                  $ref: '#/components/schemas/Pet'
##            application/xml:
##              schema:
##                type: array
##                items:
##                  $ref: '#/components/schemas/Pet'
##        '400':
##          description: Invalid tag value
##      security:
##        - petstore_auth:
##            - write:pets
##            - read:pets
##  /product/manage/search/productsList/productInfo/delete:
##    put:
##      tags:
##        - product
##      summary: 해당 상품 삭제(update로 진행)
##      description: 해당 상품 삭제 -> 완전 삭제 보다는, update로 진행해서 valid=false로 설정.
##      operationId: delete
##      parameters:
##        - name: tags
##          in: query
##          description: ID of pet to return
##          required: true
##          schema:
##            type: integer
##            format: int64
##      responses:
##        '200':
##          description: 정상적인 접근입니다.
##          content:
##            application/json:
##              schema:
##                $ref: '#/components/schemas/Pet'
##            application/xml:
##              schema:
##                $ref: '#/components/schemas/Pet'
##        '400':
##          description: Invalid ID supplied
##        '404':
##          description: Pet not found
##      security:
##        - api_key: []
##        - petstore_auth:
##            - write:pets
##            - read:pets
#
#
#components:
#  schemas:
#    ProductsList:
#        type: object
#        properties:
#          id:
#            type: integer
#            format: int64
#            example: 100000
#          username:
#            type: string
#            example: fehguy
#
#          address:
#            type: array
#            xml:
#              name: addresses
#              wrapped: true
##            items:
##              $ref: '#/'
#
#        xml:
#          name: customer